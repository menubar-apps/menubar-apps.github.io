I"-"<h1 id="github-activity-widget">GitHub Activity Widget</h1>

<p>Widget shows recent activities on GitHub. It is very similar to the GitHub’s “All activity” feed on the main page:</p>

<p align="center">
  <img src="https://github.com/streetturtle/awesome-wm-widgets/raw/master/github-activity-widget/screenshot.png" />
</p>

<p>Mouse click on the item opens repo/issue/pr depending on the type of the activity. Mouse click on user’s avatar opens user GitHub profile.</p>

<h2 id="customization">Customization</h2>

<p>It is possible to customize widget by providing a table with all or some of the following config parameters:</p>

<table>
  <thead>
    <tr>
      <th>Name</th>
      <th>Default</th>
      <th>Description</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">icon</code></td>
      <td>github.png from the widget sources</td>
      <td>Widget icon displayed on the wibar</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">username</code></td>
      <td>your username</td>
      <td>Required parameter</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">number_of_events</code></td>
      <td>10</td>
      <td>Number of events to display in the list</td>
    </tr>
  </tbody>
</table>

<h2 id="installation">Installation</h2>

<p>Clone repo under <strong>~/.config/awesome/</strong> and add widget in <strong>rc.lua</strong>:</p>

<div class="language-lua highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">local</span> <span class="n">github_activity_widget</span> <span class="o">=</span> <span class="nb">require</span><span class="p">(</span><span class="s2">"awesome-wm-widgets.github-activity-widget.github-activity-widget"</span><span class="p">)</span>
<span class="o">...</span>
<span class="n">s</span><span class="p">.</span><span class="n">mytasklist</span><span class="p">,</span> <span class="c1">-- Middle widget</span>
	<span class="p">{</span> <span class="c1">-- Right widgets</span>
    	<span class="n">layout</span> <span class="o">=</span> <span class="n">wibox</span><span class="p">.</span><span class="n">layout</span><span class="p">.</span><span class="n">fixed</span><span class="p">.</span><span class="n">horizontal</span><span class="p">,</span>
        <span class="o">...</span>
        <span class="c1">-- default</span>
        <span class="n">github_activity_widget</span><span class="p">{</span>
            <span class="n">username</span> <span class="o">=</span> <span class="s1">'streetturtle'</span><span class="p">,</span>
        <span class="p">},</span>
        <span class="c1">-- customized</span>
        <span class="n">github_activity_widget</span><span class="p">{</span>
            <span class="n">username</span> <span class="o">=</span> <span class="s1">'streetturtle'</span><span class="p">,</span>
            <span class="n">number_of_events</span> <span class="o">=</span> <span class="mi">5</span>
        <span class="p">},</span>

</code></pre></div></div>

<h2 id="how-it-works">How it works</h2>

<p>Everything starts with this timer, which gets recent activities by calling GitHub <a href="https://developer.github.com/v3/activity/events/">Events API</a> and stores the response under /.cache/awmw/github-activity-widget/activity.json directory:</p>

<div class="language-lua highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">gears</span><span class="p">.</span><span class="n">timer</span> <span class="p">{</span>
    <span class="n">timeout</span>   <span class="o">=</span> <span class="mi">600</span><span class="p">,</span>   <span class="c1">-- calls every ten minutes</span>
    <span class="n">call_now</span>  <span class="o">=</span> <span class="kc">true</span><span class="p">,</span>
    <span class="n">autostart</span> <span class="o">=</span> <span class="kc">true</span><span class="p">,</span>
    <span class="n">callback</span>  <span class="o">=</span> <span class="k">function</span><span class="p">()</span>
        <span class="n">spawn</span><span class="p">.</span><span class="n">easy_async</span><span class="p">(</span><span class="nb">string.format</span><span class="p">(</span><span class="n">UPDATE_EVENTS_CMD</span><span class="p">,</span> <span class="n">username</span><span class="p">,</span> <span class="n">CACHE_DIR</span><span class="p">),</span> <span class="k">function</span><span class="p">(</span><span class="n">stdout</span><span class="p">,</span> <span class="n">stderr</span><span class="p">)</span>
            <span class="k">if</span> <span class="n">stderr</span> <span class="o">~=</span> <span class="s1">''</span> <span class="k">then</span> <span class="n">show_warning</span><span class="p">(</span><span class="n">stderr</span><span class="p">)</span> <span class="k">return</span> <span class="k">end</span>
        <span class="k">end</span><span class="p">)</span>
    <span class="k">end</span>
<span class="p">}</span>
</code></pre></div></div>

<p>There are several reasons to store output in a file and then use it as a source to build the widget, instead of calling it everytime the widget is opened:</p>
<ul>
  <li>activity feed does not update that often</li>
  <li>events API doesn’t provide filtering of fields, so the output is quite large (300 events)</li>
  <li>it’s much faster to read file from filesystem</li>
</ul>

<p>Next important part is <strong>rebuild_widget</strong> function, which is called when mouse button clicks on the widget on the wibar. It receives a json string which contains first n events from the cache file. Those events are processed by <code class="language-plaintext highlighter-rouge">jq</code> (get first n events, remove unused fields, slightly change the json structure to simplify serialization to lua table). And then it builds a widget, row by row in a loop. To display the text part of the row we already have all neccessary information in the json string which was converted to lua table. But to show an avatar we should download it first. This is done in the following snippet. First it creates a template and then checks if file already exists, and sets it in template, otherwise, downloads it asynchronously and only then sets in:</p>

<div class="language-lua highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">local</span> <span class="n">avatar_img</span> <span class="o">=</span> <span class="n">wibox</span><span class="p">.</span><span class="n">widget</span> <span class="p">{</span>
    <span class="n">resize</span> <span class="o">=</span> <span class="kc">true</span><span class="p">,</span>
    <span class="n">forced_width</span> <span class="o">=</span> <span class="mi">40</span><span class="p">,</span>
    <span class="n">forced_height</span> <span class="o">=</span> <span class="mi">40</span><span class="p">,</span>
    <span class="n">widget</span> <span class="o">=</span> <span class="n">wibox</span><span class="p">.</span><span class="n">widget</span><span class="p">.</span><span class="n">imagebox</span>
<span class="p">}</span>

<span class="k">if</span> <span class="n">gfs</span><span class="p">.</span><span class="n">file_readable</span><span class="p">(</span><span class="n">path_to_avatar</span><span class="p">)</span> <span class="k">then</span>
    <span class="n">avatar_img</span><span class="p">:</span><span class="n">set_image</span><span class="p">(</span><span class="n">path_to_avatar</span><span class="p">)</span>
<span class="k">else</span>
    <span class="c1">-- download it first</span>
    <span class="n">spawn</span><span class="p">.</span><span class="n">easy_async</span><span class="p">(</span><span class="nb">string.format</span><span class="p">(</span>
            <span class="n">DOWNLOAD_AVATAR_CMD</span><span class="p">,</span>
            <span class="n">CACHE_DIR</span><span class="p">,</span>
            <span class="n">event</span><span class="p">.</span><span class="n">actor</span><span class="p">.</span><span class="n">id</span><span class="p">,</span>
            <span class="n">event</span><span class="p">.</span><span class="n">actor</span><span class="p">.</span><span class="n">avatar_url</span><span class="p">),</span> 
            <span class="c1">-- and then set</span>
            <span class="k">function</span><span class="p">()</span> <span class="n">avatar_img</span><span class="p">:</span><span class="n">set_image</span><span class="p">(</span><span class="n">path_to_avatar</span><span class="p">)</span> <span class="k">end</span><span class="p">)</span>
<span class="k">end</span>
</code></pre></div></div>
:ET